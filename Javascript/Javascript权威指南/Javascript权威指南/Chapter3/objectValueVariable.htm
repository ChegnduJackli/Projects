<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>

</head>
<body>
<div id="main"></div>

    <img src="../Images/3_object_compare.png" />
    <br />
    <img src="../Images/3_object2.png" />
</body>

    <script type="text/javascript">

        var strHtml = "";
        var i = "123";
        var j = parseInt(i) +200;
        Write("i= " + i + " j= " + j);
        Write("typeof(i): " + typeof (i));
        Write("typeof(j): " + typeof (j));

        Write("typeof(null): " + typeof (null)); //object
        Write("typeof(undefined): " + typeof (undefined)); //undefined

        var s = "test";
        s.len = 4;
        var t = s.len;

        Write("S.len: " + t); //underfined
        var S = new String(s);
        Write("Type of s: " + typeof (s)); //string
        Write("Type of S: " + typeof (S)); //object 

        //3.7 不可变的原始值和可变的对象使用
        //原始值（underfined,null,布尔值,数字和字符串）是不可更改的
        //字符串中所有的方法看上去返回了一个修改后的字符串，实际上返回的是一个新的字符串

        var tem = "hello";
        var p = tem.toUpperCase(); //返回HELLO
        Write("original tem： " + tem);  //原始值依旧没有改变
        Write("after convert to uppcase p： " + p);

        //数组比较相等

        var a = [];  //定义一个引用空数组的变量a
        var b = [];
        Write("a===b :" + (a === b)); //false
        var b = a;  //定义b引用同一个数组
        b[0] = 1;    
        a[0];  //=> 1; 变量a 也会更改
        a===b // =>true

        Write("a[0] :" + a[0]);
        Write("b[0] :" + b[0]);
        Write("a===b :" + (a === b)); //true
       
        var o = { x: 1 }, p = { x: 1 };
        Write("o===p :" + (o === p));//false

        var numb = "3";
        Write("Number(numb): " + Number(numb));
        Write("String(false): " + String(false));
        Write("boolean([]): " + Boolean([]));

        test(a);

        //声明提前：Javascriptt的函数作用于是指在函数内声明的所有变量在函数体内都是可见的
        //这意味着变量在声明之前甚至已经使用
        function test(o) {
            var i = 0;
            if (typeof o == "object") {
                var j = 5;
                for (var k = 0; k < 10; k++) {
                    Write("k in loop:" + k);
                }
                Write("k out the loop:"+k);   //=>10
            }
            Write("j:" + j); //=>5
        }

        f();
        f1();

        var scope = "global";
        function f() {
            Write("global scope in function: " + scope); //=>undefined
            var scope = "local";
            Write("scope in function: " + scope); //=>local 
        }
        /*你可能会误以为函数的第一行会输出"global",因为代码还没有执行到var 语句声明
        局部变量的地方。其实不然，由于函数作用于的特殊性，局部变量在整个函数体内始终是有定义的。
        也就是说，在函数体内局部变量遮盖了同名的全局变量。
        */
        //上面的函数等同于下面的函数
        function f1() {
            var scope;
            Write("global scope in function: " + scope); //=>undefined
            scope = "local";
            Write("scope in function: " + scope); //=>local
        }


        function Write(obj) {
            strHtml += "<p>" + obj + "</p>";
            document.getElementById("main").innerHTML = strHtml;
        }
    </script>
</html>
