<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
 <script src="../js/common.js" type="text/javascript"></script>
  
</head>
<body id="main">
<a href="http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html">
Javascript定义类（class）的三种方法
</a>
</body>
  <script type="text/javascript">
      //极简主义法
      //3.1 封装
      //在createNew()里面，定义一个实例对象，把这个实例对象作为返回值。
      var Cat = {
          createNew: function () {
              var cat = {};
              cat.name = "大毛";
              cat.makeSound = function () { WriteLine("喵喵喵"); };
              return cat;
          }
      };


      var cat1 = Cat.createNew();
      cat1.makeSound(); // 喵喵喵

      //3.2 继承
      //让一个类继承另一个类，实现起来很方便。只要在前者的createNew()方法中，调用后者的createNew()方法即可。先定义一个Animal类。
      var Animal = {
          createNew: function () {
              var animal = {};
              animal.sleep = function () { WriteLine("Animal 睡懒觉"); };
              return animal;
          }
      };
      //然后，在Cat的createNew()方法中，调用Animal的createNew()方法。
      var Cat = {
          createNew: function () {
              var cat = Animal.createNew();
              cat.name = "大毛";
              cat.makeSound = function () { WriteLine("喵喵喵"); };
              return cat;
          }
      };
      //这样得到的Cat实例，就会同时继承Cat类和Animal类。
      var cat1 = Cat.createNew();
      cat1.makeSound(); //喵喵喵
      cat1.sleep(); // 睡懒觉

      //3.3 私有属性和私有方法
      //在createNew()方法中，只要不是定义在cat对象上的方法和属性，都是私有的。

      var Cat = {
          createNew: function () {
              var cat = {};
              var sound = "喵喵喵";  //私有
              cat.makeSound = function () { WriteLine(sound); };
              return cat;
          }
      };
      //上例的内部变量sound，外部无法读取，只有通过cat的公有方法makeSound()来读取。
      var cat1 = Cat.createNew();
     / alert(cat1.sound); // undefined

      //3.4 数据共享
      //有时候，我们需要所有实例对象，能够读写同一项内部数据。这个时候，只要把这个内部数据，封装在类对象的里面、createNew()方法的外面即可。
      var Cat = {
          sound: "喵喵喵 共享",
          createNew: function () {
              var cat = {};
              cat.makeSound = function () { WriteLine(Cat.sound); };
              cat.changeSound = function (x) { Cat.sound = x; };
              return cat;
          }
      };
      //然后，生成两个实例对象：
      var cat1 = Cat.createNew();
      var cat2 = Cat.createNew();
      cat1.makeSound(); // 喵喵喵
      //这时，如果有一个实例对象，修改了共享的数据，另一个实例对象也会受到影响。
      cat2.changeSound("啦啦啦");
      cat2.makeSound(); // 啦啦啦
      cat1.makeSound(); // 啦啦啦


    </script>
</html>
