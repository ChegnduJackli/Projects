<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0064)http://docs.oracle.com/cd/E17952_01/refman-5.1-en/load-data.html -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>13.2.6&nbsp;LOAD DATA INFILE Syntax</title><link rel="stylesheet" type="text/css" href="./13.2.6 LOAD DATA INFILE Syntax_files/mvl.css"><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"><link rel="home" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/index.html" title="MySQL 5.1 Reference Manual"><link rel="up" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/sql-syntax-data-manipulation.html" title="13.2 Data Manipulation Statements"><link rel="prev" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert-on-duplicate.html" title="13.2.5.3 INSERT ... ON DUPLICATE KEY UPDATE Syntax"><link rel="next" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/replace.html" title="13.2.7 REPLACE Syntax">
<script language="javascript" type="text/javascript">
  function addOnload(theFunc)
  {
    var previous = window.onload;
    if (typeof window.onload != 'function')
    {
      window.onload = theFunc;
    }
    else
    {
      window.onload = function()
      {
        previous();
        theFunc();
      }
    }
  }

  addOnload(function()
  {
    var base = new Date(1400307074*1000);
    var now = new Date();
    var diff = ((now-base)/1000)/(24*3600);

    if (diff > 90) {
      var nodes = document.getElementsByClassName('titlepage');
      nodes[0].innerHTML = '<p style="border: 5px #ff0000 solid; padding: 5px; margin 5px">' +
        'This copy of the manual is more than 90 days old. We encourage you to download a ' +
        'new version from <a href="http://dev.mysql.com">dev.mysql.com/doc</a>.</p>' + nodes[0].innerHTML;
    }
  });
</script>
<noscript></noscript>
</head><body><div class="navheader"><table width="100%" summary="Navigation header"><tbody><tr><th colspan="3" align="center">13.2.6&nbsp;<code class="literal">LOAD DATA INFILE</code>
      Syntax</th></tr><tr><td width="20%" align="left"><a accesskey="p" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert-on-duplicate.html">Prev</a>&nbsp;</td><th width="60%" align="center">13.2&nbsp;Data Manipulation Statements</th><td width="20%" align="right">&nbsp;<a accesskey="n" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/replace.html">Next</a></td></tr></tbody></table><hr></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="load-data"></a>13.2.6&nbsp;<code class="literal">LOAD DATA INFILE</code>
      Syntax</h3></div></div></div><a id="idm47561700342944" class="indexterm"></a><a id="idm47561700341872" class="indexterm"></a><pre class="programlisting">LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE '<em class="replaceable"><code>file_name</code></em>'
    [REPLACE | IGNORE]
    INTO TABLE <em class="replaceable"><code>tbl_name</code></em>
    [CHARACTER SET <em class="replaceable"><code>charset_name</code></em>]
    [{FIELDS | COLUMNS}
        [TERMINATED BY '<em class="replaceable"><code>string</code></em>']
        [[OPTIONALLY] ENCLOSED BY '<em class="replaceable"><code>char</code></em>']
        [ESCAPED BY '<em class="replaceable"><code>char</code></em>']
    ]
    [LINES
        [STARTING BY '<em class="replaceable"><code>string</code></em>']
        [TERMINATED BY '<em class="replaceable"><code>string</code></em>']
    ]
    [IGNORE <em class="replaceable"><code>number</code></em> LINES]
    [(<em class="replaceable"><code>col_name_or_user_var</code></em>,...)]
    [SET <em class="replaceable"><code>col_name</code></em> = <em class="replaceable"><code>expr</code></em>,...]
</pre><p>
      The <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> statement reads rows from a text file into a
      table at a very high speed.
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> is the complement of
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/select-into.html" title="13.2.8.1 SELECT ... INTO Syntax"><code class="literal">SELECT ... INTO
      OUTFILE</code></a>. (See <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/select-into.html" title="13.2.8.1 SELECT ... INTO Syntax">Section&nbsp;13.2.8.1, “<code class="literal">SELECT ... INTO</code>
        Syntax”</a>.) To write
      data from a table to a file, use
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/select-into.html" title="13.2.8.1 SELECT ... INTO Syntax"><code class="literal">SELECT ... INTO
      OUTFILE</code></a>. To read the file back into a table, use
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a>. The syntax of the <code class="literal">FIELDS</code> and
      <code class="literal">LINES</code> clauses is the same for both statements.
      Both clauses are optional, but <code class="literal">FIELDS</code> must
      precede <code class="literal">LINES</code> if both are specified.
    </p><a id="idm47561700323104" class="indexterm"></a><p>
      You can also load data files by using the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysqlimport.html" title="4.5.5 mysqlimport — A Data Import Program"><span class="command"><strong>mysqlimport</strong></span></a> utility; it operates by sending a
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> statement to the server. The
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysqlimport.html#option_mysqlimport_local"><code class="option">--local</code></a> option causes
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysqlimport.html" title="4.5.5 mysqlimport — A Data Import Program"><span class="command"><strong>mysqlimport</strong></span></a> to read data files from the client
      host. You can specify the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysqlimport.html#option_mysqlimport_compress"><code class="option">--compress</code></a> option to get
      better performance over slow networks if the client and server
      support the compressed protocol. See
      <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysqlimport.html" title="4.5.5 mysqlimport — A Data Import Program">Section&nbsp;4.5.5, “<span class="command"><strong>mysqlimport</strong></span> — A Data Import Program”</a>.
    </p><p>
      For more information about the efficiency of
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert.html" title="13.2.5 INSERT Syntax"><code class="literal">INSERT</code></a> versus
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> and speeding up
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a>, see <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert-speed.html" title="8.3.2.1 Speed of INSERT Statements">Section&nbsp;8.3.2.1, “Speed of <code class="literal">INSERT</code> Statements”</a>.
    </p><p>
      The file name must be given as a literal string. On Windows,
      specify backslashes in path names as forward slashes or doubled
      backslashes. As of MySQL 5.1.6, the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/server-system-variables.html#sysvar_character_set_filesystem"><code class="literal">character_set_filesystem</code></a> system
      variable controls the interpretation of the file name.
    </p><p>
      The character set indicated by the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/server-system-variables.html#sysvar_character_set_database"><code class="literal">character_set_database</code></a> system
      variable is used to interpret the information in the file.
      <code class="literal">SET NAMES</code> and the setting of
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/server-system-variables.html#sysvar_character_set_client"><code class="literal">character_set_client</code></a> do not
      affect interpretation of input. If the contents of the input file
      use a character set that differs from the default, it is usually
      preferable to specify the character set of the file by using the
      <code class="literal">CHARACTER SET</code> clause, which is available as of
      MySQL 5.1.17. A character set of <code class="literal">binary</code>
      specifies <span class="quote">“<span class="quote">no conversion.</span>”</span>
    </p><p>
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> interprets all fields in the file as having the
      same character set, regardless of the data types of the columns
      into which field values are loaded. For proper interpretation of
      file contents, you must ensure that it was written with the
      correct character set. For example, if you write a data file with
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysqldump.html" title="4.5.4 mysqldump — A Database Backup Program"><span class="command"><strong>mysqldump -T</strong></span></a> or by issuing a
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/select-into.html" title="13.2.8.1 SELECT ... INTO Syntax"><code class="literal">SELECT ... INTO
      OUTFILE</code></a> statement in <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysql.html" title="4.5.1 mysql — The MySQL Command-Line Tool"><span class="command"><strong>mysql</strong></span></a>, be sure
      to use a <code class="option">--default-character-set</code> option so that
      output is written in the character set to be used when the file is
      loaded with <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a>.
    </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><div class="admon-title">Note</div><p>
        It is not possible to load data files that use the
        <code class="literal">ucs2</code> character set.
      </p></div><p>
      If you use <code class="literal">LOW_PRIORITY</code>, execution of the
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a> statement is delayed
      until no other clients are reading from the table. This affects
      only storage engines that use only table-level locking (such as
      <code class="literal">MyISAM</code>, <code class="literal">MEMORY</code>, and
      <code class="literal">MERGE</code>).
    </p><p>
      If you specify <code class="literal">CONCURRENT</code> with a
      <code class="literal">MyISAM</code> table that satisfies the condition for
      concurrent inserts (that is, it contains no free blocks in the
      middle), other threads can retrieve data from the table while
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a> is executing. This option
      affects the performance of <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD
      DATA</code></a> a bit, even if no other thread is using the table
      at the same time.
    </p><p>
      With row-based replication, <code class="literal">CONCURRENT</code> is
      replicated regardless of MySQL version. With statement-based
      replication <code class="literal">CONCURRENT</code> is not replicated prior
      to MySQL 5.1.43 (see Bug #34628). For more information, see
      <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/replication-features-load-data.html" title="16.4.1.16 Replication and LOAD DATA INFILE">Section&nbsp;16.4.1.16, “Replication and <code class="literal">LOAD DATA
        INFILE</code>”</a>.
    </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><div class="admon-title">Note</div><p>
        Prior to MySQL 5.1.23, <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a>
        performed very poorly when importing into partitioned tables.
        The statement now uses buffering to improve performance;
        however, the buffer uses 130KB memory per partition to achieve
        this. (Bug #26527)
      </p></div><p>
      The <code class="literal">LOCAL</code> keyword affects expected location of
      the file and error handling, as described later.
      <code class="literal">LOCAL</code> works only if your server and your client
      both have been configured to permit it. For example, if
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysqld.html" title="4.3.1 mysqld — The MySQL Server"><span class="command"><strong>mysqld</strong></span></a> was started with
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/server-system-variables.html#sysvar_local_infile"><code class="literal">--local-infile=0</code></a>,
      <code class="literal">LOCAL</code> does not work. See
      <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/load-data-local.html" title="6.1.6 Security Issues with LOAD DATA LOCAL">Section&nbsp;6.1.6, “Security Issues with <code class="literal">LOAD
      DATA LOCAL</code>”</a>.
    </p><p>
      The <code class="literal">LOCAL</code> keyword affects where the file is
      expected to be found:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          If <code class="literal">LOCAL</code> is specified, the file is read by
          the client program on the client host and sent to the server.
          The file can be given as a full path name to specify its exact
          location. If given as a relative path name, the name is
          interpreted relative to the directory in which the client
          program was started.
        </p><p>
          When using <code class="literal">LOCAL</code> with
          <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a>, a copy of the file
          is created in the server's temporary directory. This is
          <span class="emphasis"><em>not</em></span> the directory determined by the value
          of <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/server-system-variables.html#sysvar_tmpdir"><code class="literal">tmpdir</code></a> or
          <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/replication-options-slave.html#sysvar_slave_load_tmpdir"><code class="literal">slave_load_tmpdir</code></a>, but rather
          the operating system's temporary directory, and is not
          configurable in the MySQL Server. (Typically the system
          temporary directory is <code class="filename">/tmp</code> on Linux
          systems and <code class="filename">C:\WINDOWS\TEMP</code> on Windows.)
          Lack of sufficient space for the copy in this directory can
          cause the <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
          LOCAL</code></a> statement to fail.
        </p></li><li class="listitem"><p>
          If <code class="literal">LOCAL</code> is not specified, the file must be
          located on the server host and is read directly by the server.
          The server uses the following rules to locate the file:
        </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>
              If the file name is an absolute path name, the server uses
              it as given.
            </p></li><li class="listitem"><p>
              If the file name is a relative path name with one or more
              leading components, the server searches for the file
              relative to the server's data directory.
            </p></li><li class="listitem"><p>
              If a file name with no leading components is given, the
              server looks for the file in the database directory of the
              default database.
            </p></li></ul></div></li></ul></div><p>
      In the non-<code class="literal">LOCAL</code> case, these rules mean that a
      file named as <code class="filename">./myfile.txt</code> is read from the
      server's data directory, whereas the file named as
      <code class="filename">myfile.txt</code> is read from the database
      directory of the default database. For example, if
      <code class="literal">db1</code> is the default database, the following
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a> statement reads the file
      <code class="filename">data.txt</code> from the database directory for
      <code class="literal">db1</code>, even though the statement explicitly loads
      the file into a table in the <code class="literal">db2</code> database:
    </p><pre class="programlisting">LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;
</pre><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><div class="admon-title">Note</div><p>
        A regression in MySQL 5.1.40 caused the database referenced in a
        fully qualified table name to be ignored by
        <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a> when using replication
        with either <code class="literal">STATEMENT</code> or
        <code class="literal">MIXED</code> as the binary logging format; this
        could lead to problems if the table was not in the current
        database. As a workaround, you can specify the correct database
        with the <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/use.html" title="13.8.4 USE Syntax"><code class="literal">USE</code></a> statement prior to
        executing <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a>. If
        necessary, you can reset the default database with a second
        <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/use.html" title="13.8.4 USE Syntax"><code class="literal">USE</code></a> statement following the
        <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a> statement.
      </p><p>
        This issue was fixed in MySQL 5.1.41. (Bug #48297)
      </p></div><p>
      For security reasons, when reading text files located on the
      server, the files must either reside in the database directory or
      be readable by all. Also, to use
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> on server files, you must have the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/privileges-provided.html#priv_file"><code class="literal">FILE</code></a> privilege. See
      <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/privileges-provided.html" title="6.2.1 Privileges Provided by MySQL">Section&nbsp;6.2.1, “Privileges Provided by MySQL”</a>. For
      non-<code class="literal">LOCAL</code> load operations, if the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/server-system-variables.html#sysvar_secure_file_priv"><code class="literal">secure_file_priv</code></a> system variable
      is set to a nonempty directory name, the file to be loaded must be
      located in that directory.
    </p><p>
      Using <code class="literal">LOCAL</code> is a bit slower than letting the
      server access the files directly, because the contents of the file
      must be sent over the connection by the client to the server. On
      the other hand, you do not need the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/privileges-provided.html#priv_file"><code class="literal">FILE</code></a> privilege to load local files.
    </p><p>
      <code class="literal">LOCAL</code> also affects error handling:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          With <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
          INFILE</code></a>, data-interpretation and duplicate-key errors
          terminate the operation.
        </p></li><li class="listitem"><p>
          With <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
          LOCAL INFILE</code></a>, data-interpretation and duplicate-key
          errors become warnings and the operation continues because the
          server has no way to stop transmission of the file in the
          middle of the operation. For duplicate-key errors, this is the
          same as if <code class="literal">IGNORE</code> is specified.
          <code class="literal">IGNORE</code> is explained further later in this
          section.
        </p></li></ul></div><p>
      The <code class="literal">REPLACE</code> and <code class="literal">IGNORE</code>
      keywords control handling of input rows that duplicate existing
      rows on unique key values:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          If you specify <code class="literal">REPLACE</code>, input rows replace
          existing rows. In other words, rows that have the same value
          for a primary key or unique index as an existing row. See
          <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/replace.html" title="13.2.7 REPLACE Syntax">Section&nbsp;13.2.7, “<code class="literal">REPLACE</code> Syntax”</a>.
        </p></li><li class="listitem"><p>
          If you specify <code class="literal">IGNORE</code>, input rows that
          duplicate an existing row on a unique key value are skipped.
        </p></li><li class="listitem"><p>
          If you do not specify either option, the behavior depends on
          whether the <code class="literal">LOCAL</code> keyword is specified.
          Without <code class="literal">LOCAL</code>, an error occurs when a
          duplicate key value is found, and the rest of the text file is
          ignored. With <code class="literal">LOCAL</code>, the default behavior
          is the same as if <code class="literal">IGNORE</code> is specified; this
          is because the server has no way to stop transmission of the
          file in the middle of the operation.
        </p></li></ul></div><p>
      To ignore foreign key constraints during the load operation, issue
      a <code class="literal">SET foreign_key_checks = 0</code> statement before
      executing <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a>.
    </p><p>
      If you use <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> on an empty <code class="literal">MyISAM</code> table, all
      nonunique indexes are created in a separate batch (as for
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/repair-table.html" title="13.7.2.6 REPAIR TABLE Syntax"><code class="literal">REPAIR TABLE</code></a>). Normally, this makes
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> much faster when you have many indexes. In some
      extreme cases, you can create the indexes even faster by turning
      them off with <code class="literal">ALTER TABLE ... DISABLE KEYS</code>
      before loading the file into the table and using <code class="literal">ALTER
      TABLE ... ENABLE KEYS</code> to re-create the indexes after
      loading the file. See <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert-speed.html" title="8.3.2.1 Speed of INSERT Statements">Section&nbsp;8.3.2.1, “Speed of <code class="literal">INSERT</code> Statements”</a>.
    </p><p>
      For both the <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> and
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/select-into.html" title="13.2.8.1 SELECT ... INTO Syntax"><code class="literal">SELECT ... INTO
      OUTFILE</code></a> statements, the syntax of the
      <code class="literal">FIELDS</code> and <code class="literal">LINES</code> clauses is
      the same. Both clauses are optional, but <code class="literal">FIELDS</code>
      must precede <code class="literal">LINES</code> if both are specified.
    </p><p>
      If you specify a <code class="literal">FIELDS</code> clause, each of its
      subclauses (<code class="literal">TERMINATED BY</code>,
      <code class="literal">[OPTIONALLY] ENCLOSED BY</code>, and <code class="literal">ESCAPED
      BY</code>) is also optional, except that you must specify at
      least one of them.
    </p><p>
      If you specify no <code class="literal">FIELDS</code> or
      <code class="literal">LINES</code> clause, the defaults are the same as if
      you had written this:
    </p><pre class="programlisting">FIELDS TERMINATED BY '\t' ENCLOSED BY '' ESCAPED BY '\\'
LINES TERMINATED BY '\n' STARTING BY ''
</pre><p>
      (Backslash is the MySQL escape character within strings in SQL
      statements, so to specify a literal backslash, you must specify
      two backslashes for the value to be interpreted as a single
      backslash. The escape sequences <code class="literal">'\t'</code> and
      <code class="literal">'\n'</code> specify tab and newline characters,
      respectively.)
    </p><p>
      In other words, the defaults cause
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> to act as follows when reading input:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          Look for line boundaries at newlines.
        </p></li><li class="listitem"><p>
          Do not skip over any line prefix.
        </p></li><li class="listitem"><p>
          Break lines into fields at tabs.
        </p></li><li class="listitem"><p>
          Do not expect fields to be enclosed within any quoting
          characters.
        </p></li><li class="listitem"><p>
          Interpret characters preceded by the escape character
          <span class="quote">“<span class="quote"><code class="literal">\</code></span>”</span> as escape sequences. For
          example, <span class="quote">“<span class="quote"><code class="literal">\t</code></span>”</span>,
          <span class="quote">“<span class="quote"><code class="literal">\n</code></span>”</span>, and
          <span class="quote">“<span class="quote"><code class="literal">\\</code></span>”</span> signify tab, newline, and
          backslash, respectively. See the discussion of <code class="literal">FIELDS
          ESCAPED BY</code> later for the full list of escape
          sequences.
        </p></li></ul></div><p>
      Conversely, the defaults cause
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/select-into.html" title="13.2.8.1 SELECT ... INTO Syntax"><code class="literal">SELECT ... INTO
      OUTFILE</code></a> to act as follows when writing output:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          Write tabs between fields.
        </p></li><li class="listitem"><p>
          Do not enclose fields within any quoting characters.
        </p></li><li class="listitem"><p>
          Use <span class="quote">“<span class="quote"><code class="literal">\</code></span>”</span> to escape instances of
          tab, newline, or <span class="quote">“<span class="quote"><code class="literal">\</code></span>”</span> that
          occur within field values.
        </p></li><li class="listitem"><p>
          Write newlines at the ends of lines.
        </p></li></ul></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><div class="admon-title">Note</div><p>
        If you have generated the text file on a Windows system, you
        might have to use <code class="literal">LINES TERMINATED BY '\r\n'</code>
        to read the file properly, because Windows programs typically
        use two characters as a line terminator. Some programs, such as
        <span class="command"><strong>WordPad</strong></span>, might use <code class="literal">\r</code> as a
        line terminator when writing files. To read such files, use
        <code class="literal">LINES TERMINATED BY '\r'</code>.
      </p></div><p>
      If all the lines you want to read in have a common prefix that you
      want to ignore, you can use <code class="literal">LINES STARTING BY
      '<em class="replaceable"><code>prefix_string</code></em>'</code> to skip over
      the prefix, <span class="emphasis"><em>and anything before it</em></span>. If a line
      does not include the prefix, the entire line is skipped. Suppose
      that you issue the following statement:
    </p><pre class="programlisting">LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test
  FIELDS TERMINATED BY ','  LINES STARTING BY 'xxx';
</pre><p>
      If the data file looks like this:
    </p><pre class="programlisting">xxx"abc",1
something xxx"def",2
"ghi",3
</pre><p>
      The resulting rows will be <code class="literal">("abc",1)</code> and
      <code class="literal">("def",2)</code>. The third row in the file is skipped
      because it does not contain the prefix.
    </p><p>
      The <code class="literal">IGNORE <em class="replaceable"><code>number</code></em>
      LINES</code> option can be used to ignore lines at the start of
      the file. For example, you can use <code class="literal">IGNORE 1
      LINES</code> to skip over an initial header line containing
      column names:
    </p><pre class="programlisting">LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test IGNORE 1 LINES;
</pre><p>
      When you use <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/select-into.html" title="13.2.8.1 SELECT ... INTO Syntax"><code class="literal">SELECT
      ... INTO OUTFILE</code></a> in tandem with
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> to write data from a database into a file and
      then read the file back into the database later, the field- and
      line-handling options for both statements must match. Otherwise,
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> will not interpret the contents of the file
      properly. Suppose that you use
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/select-into.html" title="13.2.8.1 SELECT ... INTO Syntax"><code class="literal">SELECT ... INTO
      OUTFILE</code></a> to write a file with fields delimited by commas:
    </p><pre class="programlisting">SELECT * INTO OUTFILE 'data.txt'
  FIELDS TERMINATED BY ','
  FROM table2;
</pre><p>
      To read the comma-delimited file back in, the correct statement
      would be:
    </p><pre class="programlisting">LOAD DATA INFILE 'data.txt' INTO TABLE table2
  FIELDS TERMINATED BY ',';
</pre><p>
      If instead you tried to read in the file with the statement shown
      following, it wouldn't work because it instructs
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> to look for tabs between fields:
    </p><pre class="programlisting">LOAD DATA INFILE 'data.txt' INTO TABLE table2
  FIELDS TERMINATED BY '\t';
</pre><p>
      The likely result is that each input line would be interpreted as
      a single field.
    </p><a id="idm47561700167360" class="indexterm"></a><a id="idm47561700166288" class="indexterm"></a><p>
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> can be used to read files obtained from external
      sources. For example, many programs can export data in
      comma-separated values (CSV) format, such that lines have fields
      separated by commas and enclosed within double quotation marks,
      with an initial line of column names. If the lines in such a file
      are terminated by carriage return/newline pairs, the statement
      shown here illustrates the field- and line-handling options you
      would use to load the file:
    </p><pre class="programlisting">LOAD DATA INFILE 'data.txt' INTO TABLE <em class="replaceable"><code>tbl_name</code></em>
  FIELDS TERMINATED BY ',' ENCLOSED BY '"'
  LINES TERMINATED BY '\r\n'
  IGNORE 1 LINES;
</pre><p>
      If the input values are not necessarily enclosed within quotation
      marks, use <code class="literal">OPTIONALLY</code> before the
      <code class="literal">ENCLOSED BY</code> keywords.
    </p><p>
      Any of the field- or line-handling options can specify an empty
      string (<code class="literal">''</code>). If not empty, the <code class="literal">FIELDS
      [OPTIONALLY] ENCLOSED BY</code> and <code class="literal">FIELDS ESCAPED
      BY</code> values must be a single character. The
      <code class="literal">FIELDS TERMINATED BY</code>, <code class="literal">LINES STARTING
      BY</code>, and <code class="literal">LINES TERMINATED BY</code> values
      can be more than one character. For example, to write lines that
      are terminated by carriage return/linefeed pairs, or to read a
      file containing such lines, specify a <code class="literal">LINES TERMINATED BY
      '\r\n'</code> clause.
    </p><p>
      To read a file containing jokes that are separated by lines
      consisting of <code class="literal">%%</code>, you can do this
    </p><pre class="programlisting">CREATE TABLE jokes
  (a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  joke TEXT NOT NULL);
LOAD DATA INFILE '/tmp/jokes.txt' INTO TABLE jokes
  FIELDS TERMINATED BY ''
  LINES TERMINATED BY '\n%%\n' (joke);
</pre><p>
      <code class="literal">FIELDS [OPTIONALLY] ENCLOSED BY</code> controls
      quoting of fields. For output
      (<a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/select-into.html" title="13.2.8.1 SELECT ... INTO Syntax"><code class="literal">SELECT ... INTO
      OUTFILE</code></a>), if you omit the word
      <code class="literal">OPTIONALLY</code>, all fields are enclosed by the
      <code class="literal">ENCLOSED BY</code> character. An example of such
      output (using a comma as the field delimiter) is shown here:
    </p><pre class="programlisting">"1","a string","100.20"
"2","a string containing a , comma","102.20"
"3","a string containing a \" quote","102.20"
"4","a string containing a \", quote and comma","102.20"
</pre><p>
      If you specify <code class="literal">OPTIONALLY</code>, the
      <code class="literal">ENCLOSED BY</code> character is used only to enclose
      values from columns that have a string data type (such as
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/char.html" title="11.4.1 The CHAR and VARCHAR Types"><code class="literal">CHAR</code></a>,
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/binary-varbinary.html" title="11.4.2 The BINARY and VARBINARY Types"><code class="literal">BINARY</code></a>,
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/blob.html" title="11.4.3 The BLOB and TEXT Types"><code class="literal">TEXT</code></a>, or
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/enum.html" title="11.4.4 The ENUM Type"><code class="literal">ENUM</code></a>):
    </p><pre class="programlisting">1,"a string",100.20
2,"a string containing a , comma",102.20
3,"a string containing a \" quote",102.20
4,"a string containing a \", quote and comma",102.20
</pre><p>
      Note that occurrences of the <code class="literal">ENCLOSED BY</code>
      character within a field value are escaped by prefixing them with
      the <code class="literal">ESCAPED BY</code> character. Also note that if you
      specify an empty <code class="literal">ESCAPED BY</code> value, it is
      possible to inadvertently generate output that cannot be read
      properly by <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a>. For example, the preceding output just shown
      would appear as follows if the escape character is empty. Observe
      that the second field in the fourth line contains a comma
      following the quote, which (erroneously) appears to terminate the
      field:
    </p><pre class="programlisting">1,"a string",100.20
2,"a string containing a , comma",102.20
3,"a string containing a " quote",102.20
4,"a string containing a ", quote and comma",102.20
</pre><p>
      For input, the <code class="literal">ENCLOSED BY</code> character, if
      present, is stripped from the ends of field values. (This is true
      regardless of whether <code class="literal">OPTIONALLY</code> is specified;
      <code class="literal">OPTIONALLY</code> has no effect on input
      interpretation.) Occurrences of the <code class="literal">ENCLOSED BY</code>
      character preceded by the <code class="literal">ESCAPED BY</code> character
      are interpreted as part of the current field value.
    </p><p>
      If the field begins with the <code class="literal">ENCLOSED BY</code>
      character, instances of that character are recognized as
      terminating a field value only if followed by the field or line
      <code class="literal">TERMINATED BY</code> sequence. To avoid ambiguity,
      occurrences of the <code class="literal">ENCLOSED BY</code> character within
      a field value can be doubled and are interpreted as a single
      instance of the character. For example, if <code class="literal">ENCLOSED BY
      '"'</code> is specified, quotation marks are handled as shown
      here:
    </p><pre class="programlisting">"The ""BIG"" boss"  -&gt; The "BIG" boss
The "BIG" boss      -&gt; The "BIG" boss
The ""BIG"" boss    -&gt; The ""BIG"" boss
</pre><p>
      <code class="literal">FIELDS ESCAPED BY</code> controls how to read or write
      special characters:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          For input, if the <code class="literal">FIELDS ESCAPED BY</code>
          character is not empty, occurrences of that character are
          stripped and the following character is taken literally as
          part of a field value. Some two-character sequences that are
          exceptions, where the first character is the escape character.
          These sequences are shown in the following table (using
          <span class="quote">“<span class="quote"><code class="literal">\</code></span>”</span> for the escape character).
          The rules for <code class="literal">NULL</code> handling are described
          later in this section.
        </p><div class="informaltable"><table summary="This table lists two-character sequences for which
            the first character (a \)
            is the escape character." border="1"><colgroup><col><col></colgroup><thead><tr><th scope="col">Character</th><th scope="col">Escape Sequence</th></tr></thead><tbody><tr><td scope="row"><code class="literal">\0</code>

                  <a id="idm47561700117408" class="indexterm"></a>

                  <a id="idm47561700116336" class="indexterm"></a></td><td>An ASCII NUL (<code class="literal">0x00</code>) character</td></tr><tr><td scope="row"><code class="literal">\b</code>

                  <a id="idm47561700112992" class="indexterm"></a>

                  <a id="idm47561700111920" class="indexterm"></a></td><td>A backspace character</td></tr><tr><td scope="row"><code class="literal">\n</code>

                  <a id="idm47561700109264" class="indexterm"></a>

                  <a id="idm47561700108192" class="indexterm"></a>

                  <a id="idm47561700107120" class="indexterm"></a>

                  <a id="idm47561700106048" class="indexterm"></a></td><td>A newline (linefeed) character</td></tr><tr><td scope="row"><code class="literal">\r</code>

                  <a id="idm47561700103376" class="indexterm"></a>

                  <a id="idm47561700102304" class="indexterm"></a>

                  <a id="idm47561700101232" class="indexterm"></a></td><td>A carriage return character</td></tr><tr><td scope="row"><code class="literal">\t</code>

                  <a id="idm47561700098560" class="indexterm"></a>

                  <a id="idm47561700097488" class="indexterm"></a></td><td>A tab character.</td></tr><tr><td scope="row"><code class="literal">\Z</code>

                  <a id="idm47561700094832" class="indexterm"></a>

                  <a id="idm47561700093760" class="indexterm"></a></td><td>ASCII 26 (Control+Z)</td></tr><tr><td scope="row"><code class="literal">\N</code>

                  <a id="idm47561700091104" class="indexterm"></a></td><td>NULL</td></tr></tbody></table></div><p>
          For more information about
          <span class="quote">“<span class="quote"><code class="literal">\</code></span>”</span>-escape syntax, see
          <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/string-literals.html" title="9.1.1 String Literals">Section&nbsp;9.1.1, “String Literals”</a>.
        </p><p>
          If the <code class="literal">FIELDS ESCAPED BY</code> character is
          empty, escape-sequence interpretation does not occur.
        </p></li><li class="listitem"><p>
          For output, if the <code class="literal">FIELDS ESCAPED BY</code>
          character is not empty, it is used to prefix the following
          characters on output:
        </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>
              The <code class="literal">FIELDS ESCAPED BY</code> character
            </p></li><li class="listitem"><p>
              The <code class="literal">FIELDS [OPTIONALLY] ENCLOSED BY</code>
              character
            </p></li><li class="listitem"><p>
              The first character of the <code class="literal">FIELDS TERMINATED
              BY</code> and <code class="literal">LINES TERMINATED BY</code>
              values
            </p></li><li class="listitem"><p>
              ASCII <code class="literal">0</code> (what is actually written
              following the escape character is ASCII
              <span class="quote">“<span class="quote"><code class="literal">0</code></span>”</span>, not a zero-valued
              byte)
            </p></li></ul></div><p>
          If the <code class="literal">FIELDS ESCAPED BY</code> character is
          empty, no characters are escaped and <code class="literal">NULL</code>
          is output as <code class="literal">NULL</code>, not
          <code class="literal">\N</code>. It is probably not a good idea to
          specify an empty escape character, particularly if field
          values in your data contain any of the characters in the list
          just given.
        </p></li></ul></div><p>
      In certain cases, field- and line-handling options interact:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          If <code class="literal">LINES TERMINATED BY</code> is an empty string
          and <code class="literal">FIELDS TERMINATED BY</code> is nonempty, lines
          are also terminated with <code class="literal">FIELDS TERMINATED
          BY</code>.
        </p></li><li class="listitem"><p>
          If the <code class="literal">FIELDS TERMINATED BY</code> and
          <code class="literal">FIELDS ENCLOSED BY</code> values are both empty
          (<code class="literal">''</code>), a fixed-row (nondelimited) format is
          used. With fixed-row format, no delimiters are used between
          fields (but you can still have a line terminator). Instead,
          column values are read and written using a field width wide
          enough to hold all values in the field. For
          <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/integer-types.html" title="11.2.1 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"><code class="literal">TINYINT</code></a>,
          <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/integer-types.html" title="11.2.1 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"><code class="literal">SMALLINT</code></a>,
          <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/integer-types.html" title="11.2.1 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"><code class="literal">MEDIUMINT</code></a>,
          <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/integer-types.html" title="11.2.1 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"><code class="literal">INT</code></a>, and
          <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/integer-types.html" title="11.2.1 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"><code class="literal">BIGINT</code></a>, the field widths are 4,
          6, 8, 11, and 20, respectively, no matter what the declared
          display width is.
        </p><p>
          <code class="literal">LINES TERMINATED BY</code> is still used to
          separate lines. If a line does not contain all fields, the
          rest of the columns are set to their default values. If you do
          not have a line terminator, you should set this to
          <code class="literal">''</code>. In this case, the text file must
          contain all fields for each row.
        </p><p>
          Fixed-row format also affects handling of
          <code class="literal">NULL</code> values, as described later. Note that
          fixed-size format does not work if you are using a multi-byte
          character set.
        </p></li></ul></div><p>
      Handling of <code class="literal">NULL</code> values varies according to the
      <code class="literal">FIELDS</code> and <code class="literal">LINES</code> options in
      use:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          For the default <code class="literal">FIELDS</code> and
          <code class="literal">LINES</code> values, <code class="literal">NULL</code> is
          written as a field value of <code class="literal">\N</code> for output,
          and a field value of <code class="literal">\N</code> is read as
          <code class="literal">NULL</code> for input (assuming that the
          <code class="literal">ESCAPED BY</code> character is
          <span class="quote">“<span class="quote"><code class="literal">\</code></span>”</span>).
        </p></li><li class="listitem"><p>
          If <code class="literal">FIELDS ENCLOSED BY</code> is not empty, a field
          containing the literal word <code class="literal">NULL</code> as its
          value is read as a <code class="literal">NULL</code> value. This differs
          from the word <code class="literal">NULL</code> enclosed within
          <code class="literal">FIELDS ENCLOSED BY</code> characters, which is
          read as the string <code class="literal">'NULL'</code>.
        </p></li><li class="listitem"><p>
          If <code class="literal">FIELDS ESCAPED BY</code> is empty,
          <code class="literal">NULL</code> is written as the word
          <code class="literal">NULL</code>.
        </p></li><li class="listitem"><p>
          With fixed-row format (which is used when <code class="literal">FIELDS
          TERMINATED BY</code> and <code class="literal">FIELDS ENCLOSED
          BY</code> are both empty), <code class="literal">NULL</code> is
          written as an empty string. Note that this causes both
          <code class="literal">NULL</code> values and empty strings in the table
          to be indistinguishable when written to the file because both
          are written as empty strings. If you need to be able to tell
          the two apart when reading the file back in, you should not
          use fixed-row format.
        </p></li></ul></div><p>
      An attempt to load <code class="literal">NULL</code> into a <code class="literal">NOT
      NULL</code> column causes assignment of the implicit default
      value for the column's data type and a warning, or an error in
      strict SQL mode. Implicit default values are discussed in
      <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/data-type-defaults.html" title="11.5 Data Type Default Values">Section&nbsp;11.5, “Data Type Default Values”</a>.
    </p><p>
      Some cases are not supported by
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a>:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          Fixed-size rows (<code class="literal">FIELDS TERMINATED BY</code> and
          <code class="literal">FIELDS ENCLOSED BY</code> both empty) and
          <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/blob.html" title="11.4.3 The BLOB and TEXT Types"><code class="literal">BLOB</code></a> or
          <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/blob.html" title="11.4.3 The BLOB and TEXT Types"><code class="literal">TEXT</code></a> columns.
        </p></li><li class="listitem"><p>
          If you specify one separator that is the same as or a prefix
          of another, <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD
          DATA INFILE</code></a> cannot interpret the input properly. For
          example, the following <code class="literal">FIELDS</code> clause would
          cause problems:
        </p><pre class="programlisting">FIELDS TERMINATED BY '"' ENCLOSED BY '"'
</pre></li><li class="listitem"><p>
          If <code class="literal">FIELDS ESCAPED BY</code> is empty, a field
          value that contains an occurrence of <code class="literal">FIELDS ENCLOSED
          BY</code> or <code class="literal">LINES TERMINATED BY</code>
          followed by the <code class="literal">FIELDS TERMINATED BY</code> value
          causes <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
          INFILE</code></a> to stop reading a field or line too early.
          This happens because
          <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
          INFILE</code></a> cannot properly determine where the field or
          line value ends.
        </p></li></ul></div><p>
      The following example loads all columns of the
      <code class="literal">persondata</code> table:
    </p><pre class="programlisting">LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata;
</pre><p>
      By default, when no column list is provided at the end of the
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> statement, input lines are expected to contain a
      field for each table column. If you want to load only some of a
      table's columns, specify a column list:
    </p><pre class="programlisting">LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata (col1,col2,...);
</pre><p>
      You must also specify a column list if the order of the fields in
      the input file differs from the order of the columns in the table.
      Otherwise, MySQL cannot tell how to match input fields with table
      columns.
    </p><p>
      The column list can contain either column names or user variables.
      With user variables, the <code class="literal">SET</code> clause enables you
      to perform transformations on their values before assigning the
      result to columns.
    </p><p>
      User variables in the <code class="literal">SET</code> clause can be used in
      several ways. The following example uses the first input column
      directly for the value of <code class="literal">t1.column1</code>, and
      assigns the second input column to a user variable that is
      subjected to a division operation before being used for the value
      of <code class="literal">t1.column2</code>:
    </p><pre class="programlisting">LOAD DATA INFILE 'file.txt'
  INTO TABLE t1
  (column1, @var1)
  SET column2 = @var1/100;
</pre><p>
      The <code class="literal">SET</code> clause can be used to supply values not
      derived from the input file. The following statement sets
      <code class="literal">column3</code> to the current date and time:
    </p><pre class="programlisting">LOAD DATA INFILE 'file.txt'
  INTO TABLE t1
  (column1, column2)
  SET column3 = CURRENT_TIMESTAMP;
</pre><p>
      You can also discard an input value by assigning it to a user
      variable and not assigning the variable to a table column:
    </p><pre class="programlisting">LOAD DATA INFILE 'file.txt'
  INTO TABLE t1
  (column1, @dummy, column2, @dummy, column3);
</pre><p>
      Use of the column/variable list and <code class="literal">SET</code> clause
      is subject to the following restrictions:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          Assignments in the <code class="literal">SET</code> clause should have
          only column names on the left hand side of assignment
          operators.
        </p></li><li class="listitem"><p>
          You can use subqueries in the right hand side of
          <code class="literal">SET</code> assignments. A subquery that returns a
          value to be assigned to a column may be a scalar subquery
          only. Also, you cannot use a subquery to select from the table
          that is being loaded.
        </p></li><li class="listitem"><p>
          Lines ignored by an <code class="literal">IGNORE</code> clause are not
          processed for the column/variable list or
          <code class="literal">SET</code> clause.
        </p></li><li class="listitem"><p>
          User variables cannot be used when loading data with fixed-row
          format because user variables do not have a display width.
        </p></li></ul></div><p>
      When processing an input line, <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD
      DATA</code></a> splits it into fields and uses the values according
      to the column/variable list and the <code class="literal">SET</code> clause,
      if they are present. Then the resulting row is inserted into the
      table. If there are <code class="literal">BEFORE INSERT</code> or
      <code class="literal">AFTER INSERT</code> triggers for the table, they are
      activated before or after inserting the row, respectively.
    </p><p>
      If an input line has too many fields, the extra fields are ignored
      and the number of warnings is incremented.
    </p><p>
      If an input line has too few fields, the table columns for which
      input fields are missing are set to their default values. Default
      value assignment is described in
      <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/data-type-defaults.html" title="11.5 Data Type Default Values">Section&nbsp;11.5, “Data Type Default Values”</a>.
    </p><p>
      An empty field value is interpreted different from a missing
      field:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          For string types, the column is set to the empty string.
        </p></li><li class="listitem"><p>
          For numeric types, the column is set to <code class="literal">0</code>.
        </p></li><li class="listitem"><p>
          For date and time types, the column is set to the appropriate
          <span class="quote">“<span class="quote">zero</span>”</span> value for the type. See
          <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/date-and-time-types.html" title="11.3 Date and Time Types">Section&nbsp;11.3, “Date and Time Types”</a>.
        </p></li></ul></div><p>
      These are the same values that result if you assign an empty
      string explicitly to a string, numeric, or date or time type
      explicitly in an <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert.html" title="13.2.5 INSERT Syntax"><code class="literal">INSERT</code></a> or
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/update.html" title="13.2.10 UPDATE Syntax"><code class="literal">UPDATE</code></a> statement.
    </p><p>
      Treatment of empty or incorrect field values differs from that
      just described if the SQL mode is set to a restrictive value. For
      example, if
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/server-system-variables.html#sysvar_sql_mode"><code class="literal">sql_mode='TRADITIONAL</code></a>, conversion
      of an empty value or a value such as <code class="literal">'x'</code> for a
      numeric column results in an error, not conversion to 0. (With
      <code class="literal">LOCAL</code>, warnings occur rather than errors, even
      with a restrictive <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/server-system-variables.html#sysvar_sql_mode"><code class="literal">sql_mode</code></a>
      value, because the server has no way to stop transmission of the
      file in the middle of the operation.)
    </p><p>
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/datetime.html" title="11.3.1 The DATE, DATETIME, and TIMESTAMP Types"><code class="literal">TIMESTAMP</code></a> columns are set to the
      current date and time only if there is a <code class="literal">NULL</code>
      value for the column (that is, <code class="literal">\N</code>) and the
      column is not declared to permit <code class="literal">NULL</code> values,
      or if the <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/datetime.html" title="11.3.1 The DATE, DATETIME, and TIMESTAMP Types"><code class="literal">TIMESTAMP</code></a> column's
      default value is the current timestamp and it is omitted from the
      field list when a field list is specified.
    </p><p>
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> regards all input as strings, so you cannot use
      numeric values for <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/enum.html" title="11.4.4 The ENUM Type"><code class="literal">ENUM</code></a> or
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/set.html" title="11.4.5 The SET Type"><code class="literal">SET</code></a> columns the way you can with
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert.html" title="13.2.5 INSERT Syntax"><code class="literal">INSERT</code></a> statements. All
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/enum.html" title="11.4.4 The ENUM Type"><code class="literal">ENUM</code></a> and
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/set.html" title="11.4.5 The SET Type"><code class="literal">SET</code></a> values must be specified as
      strings.
    </p><p>
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/bit-type.html" title="11.2.4 Bit-Value Type - BIT"><code class="literal">BIT</code></a> values cannot be loaded using
      binary notation (for example, <code class="literal">b'011010'</code>). To
      work around this, specify the values as regular integers and use
      the <code class="literal">SET</code> clause to convert them so that MySQL
      performs a numeric type conversion and loads them into the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/bit-type.html" title="11.2.4 Bit-Value Type - BIT"><code class="literal">BIT</code></a> column properly:
    </p><pre class="programlisting">shell&gt; <strong class="userinput"><code>cat /tmp/bit_test.txt</code></strong>
2
127
shell&gt; <strong class="userinput"><code>mysql test</code></strong>
mysql&gt; <strong class="userinput"><code>LOAD DATA INFILE '/tmp/bit_test.txt'</code></strong>
    -&gt; <strong class="userinput"><code>INTO TABLE bit_test (@var1) SET b = CAST(@var1 AS UNSIGNED);</code></strong>
Query OK, 2 rows affected (0.00 sec)
Records: 2  Deleted: 0  Skipped: 0  Warnings: 0

mysql&gt; <strong class="userinput"><code>SELECT BIN(b+0) FROM bit_test;</code></strong>
+----------+
| bin(b+0) |
+----------+
| 10       |
| 1111111  |
+----------+
2 rows in set (0.00 sec)
</pre><p>
      On Unix, if you need <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA</code></a> to
      read from a pipe, you can use the following technique (the example
      loads a listing of the <code class="filename">/</code> directory into the
      table <code class="literal">db1.t1</code>):
    </p><pre class="programlisting">mkfifo /mysql/data/db1/ls.dat
chmod 666 /mysql/data/db1/ls.dat
find / -ls &gt; /mysql/data/db1/ls.dat &amp;
mysql -e "LOAD DATA INFILE 'ls.dat' INTO TABLE t1" db1
</pre><p>
      Note that you must run the command that generates the data to be
      loaded and the <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysql.html" title="4.5.1 mysql — The MySQL Command-Line Tool"><span class="command"><strong>mysql</strong></span></a> commands either on
      separate terminals, or run the data generation process in the
      background (as shown in the preceding example). If you do not do
      this, the pipe will block until data is read by the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysql.html" title="4.5.1 mysql — The MySQL Command-Line Tool"><span class="command"><strong>mysql</strong></span></a> process.
    </p><p>
      When the <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> statement finishes, it returns an information
      string in the following format:
    </p><pre class="programlisting">Records: 1  Deleted: 0  Skipped: 0  Warnings: 0
</pre><p>
      Warnings occur under the same circumstances as when values are
      inserted using the <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert.html" title="13.2.5 INSERT Syntax"><code class="literal">INSERT</code></a> statement
      (see <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert.html" title="13.2.5 INSERT Syntax">Section&nbsp;13.2.5, “<code class="literal">INSERT</code> Syntax”</a>), except that
      <a class="link" href="./13.2.6 LOAD DATA INFILE Syntax_files/13.2.6 LOAD DATA INFILE Syntax.htm" title="13.2.6 LOAD DATA INFILE Syntax"><code class="literal">LOAD DATA
      INFILE</code></a> also generates warnings when there are too few or
      too many fields in the input row.
    </p><p>
      You can use <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/show-warnings.html" title="13.7.5.42 SHOW WARNINGS Syntax"><code class="literal">SHOW WARNINGS</code></a> to get a
      list of the first <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/server-system-variables.html#sysvar_max_error_count"><code class="literal">max_error_count</code></a>
      warnings as information about what went wrong. See
      <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/show-warnings.html" title="13.7.5.42 SHOW WARNINGS Syntax">Section&nbsp;13.7.5.42, “<code class="literal">SHOW WARNINGS</code> Syntax”</a>.
    </p><a id="idm47561699947856" class="indexterm"></a><p>
      If you are using the C API, you can get information about the
      statement by calling the
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysql-info.html" title="21.8.7.35 mysql_info()"><code class="literal">mysql_info()</code></a> function. See
      <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/mysql-info.html" title="21.8.7.35 mysql_info()">Section&nbsp;21.8.7.35, “<code class="literal">mysql_info()</code>”</a>.
    </p><p>
      For partitioned tables using storage engines that employ table
      locks, such as <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/myisam-storage-engine.html" title="14.5 The MyISAM Storage Engine"><code class="literal">MyISAM</code></a>, any locks
      caused by <code class="literal">LOAD DATA</code> perform locks on all
      partitions of the table. This does not apply to tables using
      storage engines which employ row-level locking, such as
      <a class="link" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/innodb-storage-engine.html" title="14.6 The InnoDB Storage Engine"><code class="literal">InnoDB</code></a>. For more information, see
      <a class="xref" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/partitioning-limitations-locking.html" title="18.5.4 Partitioning and Table-Level Locking">Section&nbsp;18.5.4, “Partitioning and Table-Level Locking”</a>.
    </p></div><div class="navfooter"><hr><table width="100%" summary="Navigation footer"><tbody><tr><td width="40%" align="left"><a accesskey="p" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/insert-on-duplicate.html">Prev</a>&nbsp;</td><td width="20%" align="center"><a accesskey="u" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/sql-syntax-data-manipulation.html">Up</a></td><td width="40%" align="right">&nbsp;<a accesskey="n" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/replace.html">Next</a></td></tr><tr><td width="40%" align="left" valign="top">13.2.5.3&nbsp;<code class="literal">INSERT ... ON
        DUPLICATE KEY UPDATE</code> Syntax&nbsp;</td><td width="20%" align="center"><a accesskey="h" href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/index.html">Home</a></td><td width="40%" align="right" valign="top">&nbsp;13.2.7&nbsp;<code class="literal">REPLACE</code> Syntax</td></tr></tbody></table></div><div class="copyright-footer"><p>
    Copyright © 1997, 2014, Oracle and/or its affiliates. All
    rights reserved.
  <a href="http://docs.oracle.com/cd/E17952_01/refman-5.1-en/preface.html#legalnotice">Legal Notices</a></p></div></body></html>